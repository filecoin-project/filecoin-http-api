models:
  Block:
    type: object
    properties:
      kind:
        type: string
        enum: [block]
        readOnly: true
      id: 
        type: string
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of the Block
        example: bafy2bzaceahv3kv4yllfdfrvtsr6rn5g5277dmxhx4tu4uvhvg2udpuate3te
      header: 
        $ref: '#/models/BlockHeader'
      executedMessages:
        type: array
        items:
          $ref: '#/models/ExecutedMessage'
  BlockHeader:
    type: object
    properties:
      kind:
        type: string
        enum: [blockHeader]
        readOnly: true
      id: 
        type: string
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of the Block
        example: bafy2bzaceahv3kv4yllfdfrvtsr6rn5g5277dmxhx4tu4uvhvg2udpuate3te
      height: 
        type: number
        description: Height is the chain height of this block.
        example: 200193
      minerId: 
        type: string
        description: The address of the miner Actor that mined this block.
        example: t2usk2yzfu23uq2wyuc3w6ov233nxyhkysju2suba
      messagesCid:
        type: string
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of the of bls and secpk signed trees of Messages included in this Block.
        example: bafy2bzacebc3bt6cedhoyw34drrmjvazhu4oj25er2ebk4u445pzycvq4ta4a
      receiptsCid:
        type: string
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of the of tree containing receipts for the messages included in this block. Receipts are the return values and errors codes resulting from messages.
        example: bafy2bzacebc3bt6cedhoyw34drrmjvazhu4oj25er2ebk4u445pzycvq4ta4a
      tickets: 
        type: array
        items:
          type: object
          description: A Ticket is a marker of a tick of the blockchain's clock. It is the source of randomness for proofs of storage and leader election. It is generated by the miner of a block using a VRF and a VDF.
          properties:
            vrfProof:
              type: string
              description: A base64 encoded string representing the binary proof output of running a VRF on the VDFResult of the parent ticket.
              example: QsIHRoYj...
            vdfResult:
              type: string
              description: A base64 encoded string of data derived by running a VDF on vrfProof
              example: cyBjbG9j...
            vdfProof:
              type: string
              description: A base64 encoded string of the proof of delay during computation of vdfResult
              example: nkgYSBwZ...
      electionProof:
        type: string
        description: A base64 encoded byte array that represents the proof that the miner of this Block is a leader at this round.
        example: V8896JC51ikqPVqYUCVbHzUfaOgjTBF6BYc8G/2P9CJMAg8MJzOi1j3F8hJSj/C6tKTLd9qHpLEjRpiGUzz04gE=
      parentTipsetId:
        type: string
        description: The ID of the Tipset on which this block was based. In the spec this field is defined as an array of Block IDs, which is effectively equivalent to a Tipset ID in this API.
        example: bafy2bzacebnsn4ywt2cgejgp32rgsv4vaylrqe32axw4cfadxhoutxxb7puzs
      parentWeight:
        type: number
        description: parentWeight is the aggregate chain weight ([spec](https://github.com/filecoin-project/specs/blob/master/expected-consensus.md#chain-weighting)) of the parent Tipset.
        example: 2001934
      stateRoot:
        type: string
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of the root of the tree containing Actor state after the application of all the messages mined int his Block.
        example: bafyreih4xzehg7qudgdwve27pvmtblnc3ib5ql7haeouainjnavyo46eoy
      timestamp:
        type: number
        description: The block Timestamp is used to enforce a form of block delay by honest miners. Unix time UTC timestamp (in seconds) stored as an unsigned integer.
        example: 1568753711
      blsAggregate:
        type: string
        description: A base64 encoded representation of the aggregated BLS signature for all the messages in this block that were signed using BLS signatures
        example: TODO
      blockSig:
        type: string
        description: A base64 encoded representation of the signature over the hash of this entire block with the miner's worker key to ensure that it is not tampered with after creation
        example: TODO
  ExecutedMessage:
    type: object
    properties:
      kind:
        type: string
        enum: [executedMessage]
        readOnly: true
      id:
        type: string
        readOnly: true
        description: The CID ([Content Identifier](https://github.com/ipld/cid)) of this ExecutedMessage
        example: bafy2bzacebc3bt6cedhoyw34drrmjvazhu4oj25er2ebk4u445pzycvq4ta4a
      blockId:
        type: string
        readOnly: true
        description: The CID of the mined block that included this ExecutedMessage.
        example: bafy2bzacebakx3c5g22seerja562tqb32bhecp4w2quj4mhvmovy4oqzbr2u4
      message:
        $ref: 'chain.yml#/models/Message'
      exitCode: 
        type: number
        readOnly: true
        description: The exit value returned by the method this message was sent to. 0 is success, anything else is an error code in unix style.
        example: 0
      return: 
        type: object
        readOnly: true
        description: The base64 encoded return values, if any, from processing a message. This can be non-empty even in the case of error (e.g., to provide programmatically readable detail about errors).
        example: 3AE=
  Message:
    type: object
    properties:
      kind:
        type: string
        enum: [message]
        readOnly: true
      id:
        type: string
        readOnly: true
      nonce:
        type: number
        readOnly: true
      from: 
        type: string
        readOnly: true
      to: 
        type: string
      value:
        type: number
      gasPrice: 
        type: number
      gasLimit:
        type: number
      method: 
        type: string
      parameters: 
        type: object
      signature: 
        type: string
        readOnly: true
  Tipset:
    type: object
    properties:
      kind: 
        type: string
        enum: [tipset]
        readOnly: true
      id:
        type: string
        readOnly: true
        example: 'zDPWYqFCyaQ9QJHr1qWZ19rFg3YRkcuXREkvpiHRJZhGN5T8SnyJ'
      height:
        type: number
      blocks:
        type: array
        items:
          $ref: '#/models/BlockHeader'  
endpoints:
  block_resource:
    get:
      operationId: getBlockById
      summary: Find block by ID
      description: Return information about the Block with the specified ID
      tags:
        - Blocks
      parameters: 
      - name: blockId
        in: path
        description: ID of the Block to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/models/Block'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'
  executed_message_resource:
    get:
      operationId: getExecutedMessageById
      summary: Find ExecutedMessage by ID
      description: Return information about the ExecutedMessage with the specified ID. An executed Message is one that has been included in a valid block in the chain. It includes return value and status information.
      tags:
        - Messages
      parameters: 
      - name: executedMessageId
        in: path
        description: ID of the executed message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/models/ExecutedMessage'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'
  message_resource:
    get:
      operationId: getMessageById
      summary: Find Message by ID
      description: Return information about the Message with the specified ID
      tags: 
        - nessages
      parameters: 
      - name: messageId
        in: path
        description: ID of the message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/models/Message'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'
  messages_collection:
    post:
      operationId: createMessage
      summary: Send a Message
      description: This method sends a new Message to an Actor recipient.
      tags: 
        - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/models/Message'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/models/Message'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'
  tipset_resource:
    get:
      operationId: getTipsetById
      summary: Fetch a Tipset by ID
      description: Return information about the Tipset with the specified ID
      tags:
        - Tipsets
      parameters: 
      - name: tipsetId
        in: path
        description: ID of the Tipset to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/models/Tipset'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'
  tipsets_collection:
    get:
      operationId: listTipsets
      summary: List Tipsets
      description: List Tipsets currently known to this node in reverse height order
      tags:
        - Tipsets
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/models/Tipset'
        401:
          $ref: 'api.yml#/components/responses/UnauthorizedError'